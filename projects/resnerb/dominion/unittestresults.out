Results for running dominion tests: 
*****unittest1.c:
----------------- Unit Test: fullDeckCount ----------------
TEST 1: COUNTING NUMBER OF ESTATE & COPPER FOR EACH PLAYER AT START OF GAME
Player 0's Hand Count: 5
Starting Cards In Player 0's Hand: (4) (4) (1) (4) (4) ;
Player 0's Deck Count: 5
Starting Cards In Player 0's Deck: (1) (1) (4) (4) (4) ;
Number of Copper Found: 7 Number of Estate Found: 3 Number of Smithy Found: 0 Player 1's Hand Count: 0
Starting Cards In Player 1's Hand: ;
Player 1's Deck Count: 10
Starting Cards In Player 1's Deck: (4) (4) (1) (4) (4) (4) (4) (1) (1) (4) ;
Number of Copper Found: 7 Number of Estate Found: 3 Number of Smithy Found: 0 TEST 2: REPLACE 2 CARDS IN DECK WITH VILLAGE & GOLD
Player 0's Hand Count: 5
Starting Cards In Player 0's Hand: (4) (4) (1) (4) (4) ;
Player 0's Deck Count: 5
Starting Cards In Player 0's Deck: (14) (1) (4) (6) (4) ;
Number of Copper Found: 6 Number of Estate Found: 2 Number of Village Found: 1 Number of Gold Found: 1 Number of Duchy Found: 0 Player 1's Hand Count: 0
Starting Cards In Player 1's Hand: ;
Player 1's Deck Count: 10
Starting Cards In Player 1's Deck: (14) (4) (1) (6) (4) (4) (4) (1) (1) (4) ;
Number of Copper Found: 5 Number of Estate Found: 3 Number of Village Found: 1 Number of Gold Found: 1 Number of Duchy Found: 0 TEST 3: ADD 2 CARDS TO THE DISCARD PILE
Player 0's Hand Count: 5
Starting Cards In Player 0's Hand: (4) (4) (1) (4) (4) ;
Player 0's Deck Count: 5
Starting Cards In Player 0's Deck: (14) (1) (4) (6) (4) ;
Player 0's Discard Count: 2
Starting Cards In Player 0's Discard: (18) (6) ;
Number of Copper Found: 6 Number of Estate Found: 2 Number of Village Found: 1 Number of Gold Found: 2 Number of Steward Found: 1 Number of Duchy Found: 0 Player 1's Hand Count: 0
Starting Cards In Player 1's Hand: ;
Player 1's Deck Count: 10
Starting Cards In Player 1's Deck: (14) (4) (1) (6) (4) (4) (4) (1) (1) (4) ;
Player 1's Discard Count: 2
Starting Cards In Player 1's Discard: (18) (6) ;
Number of Copper Found: 5 Number of Estate Found: 3 Number of Village Found: 1 Number of Gold Found: 2 Number of Steward Found: 1 Number of Duchy Found: 0 
 >>>>> SUCCESS: Testing complete fullDeckCount <<<<<

File 'dominion.c'
Lines executed:17.20% of 558
Creating 'dominion.c.gcov'

*****unittest2.c:
----------------- Unit Test: endTurn ----------------
TEST 1: CHECKING THE EndTurn STORES PLAYER DATA CORRECTLY WHEN NO CARDS PLAYED
Whose Turn = 0, Expected = 0
Player 0's Hand Count: 5
Starting Cards In Player 0's Hand: (4) (4) (1) (4) (4) ;
Player 0's Deck Count: 5
Starting Cards In Player 0's Deck: (1) (1) (4) (4) (4) ;
Player 0's Discard Count: 0
Starting Cards In Player 0's Discard: ;
Ending Player 0's Turn
Player 0's Hand Count: 0
Ending Cards In Player 0's Hand: ;
Player 0's Deck Count: 5
Ending Cards In Player 0's Deck: (1) (1) (4) (4) (4) ;
Player 0's Discard Count: 5
Ending Cards In Player 0's Discard: (4) (4) (1) (4) (4) ;
Total Cards Before Turn Ends = 10, Total Cards After Turn Ends = 10
Card 0 - Discard After End Turn: 4, Hand Card Before End Turn: 4
Card 0 - Discard After End Turn: 4, Hand Card Before End Turn: 4
Card 0 - Discard After End Turn: 1, Hand Card Before End Turn: 1
Card 0 - Discard After End Turn: 4, Hand Card Before End Turn: 4
Card 0 - Discard After End Turn: 4, Hand Card Before End Turn: 4
Whose Turn = 1, Expected = 1
Player 1's Hand Count: 5
Starting Cards In Player 1's Hand: (4) (1) (1) (4) (4) ;
Player 1's Deck Count: 5
Starting Cards In Player 1's Deck: (4) (4) (1) (4) (4) ;
Player 1's Discard Count: 0
Starting Cards In Player 1's Discard: ;
Ending Player 1's Turn
Player 1's Hand Count: 0
Ending Cards In Player 1's Hand: ;
Player 1's Deck Count: 5
Ending Cards In Player 1's Deck: (4) (4) (1) (4) (4) ;
Player 1's Discard Count: 5
Ending Cards In Player 1's Discard: (4) (1) (1) (4) (4) ;
Total Cards Before Turn Ends = 10, Total Cards After Turn Ends = 10
Card 1 - Discard After End Turn: 4, Hand Card Before End Turn: 4
Card 1 - Discard After End Turn: 1, Hand Card Before End Turn: 1
Card 1 - Discard After End Turn: 1, Hand Card Before End Turn: 1
Card 1 - Discard After End Turn: 4, Hand Card Before End Turn: 4
Card 1 - Discard After End Turn: 4, Hand Card Before End Turn: 4
Whose Turn = 0, Expected = 0
TEST 2: CHECKING THE EndTurn STORES PLAYER DATA CORRECTLY AFTER ONE CARD PLAYED
Whose Turn = 0, Expected = 0
Player 0's Hand Count: 5
Starting Cards In Player 0's Hand: (13) (4) (1) (4) (4) ;
Player 0's Deck Count: 5
Starting Cards In Player 0's Deck: (1) (1) (4) (4) (4) ;
Player 0's Discard Count: 0
Starting Cards In Player 0's Discard: ;
Ending Player 0's Turn
Player 0's Hand Count: 0
Ending Cards In Player 0's Hand: ;
Player 0's Deck Count: 2
Ending Cards In Player 0's Deck: (1) (1) ;
Player 0's Discard Count: 7
Ending Cards In Player 0's Discard: (4) (4) (1) (4) (4) (4) (4) ;
Total Cards Before Turn Ends = 10, Total Cards After Turn Ends = 9
----- ASSERT TRUE FAILED -----
Value LHS: 10
Value RHS: 9
Whose Turn = 1, Expected = 1
Player 1's Hand Count: 5
Starting Cards In Player 1's Hand: (13) (1) (1) (4) (4) ;
Player 1's Deck Count: 5
Starting Cards In Player 1's Deck: (4) (4) (1) (4) (4) ;
Player 1's Discard Count: 0
Starting Cards In Player 1's Discard: ;
Ending Player 1's Turn
Player 1's Hand Count: 0
Ending Cards In Player 1's Hand: ;
Player 1's Deck Count: 2
Ending Cards In Player 1's Deck: (4) (4) ;
Player 1's Discard Count: 7
Ending Cards In Player 1's Discard: (1) (1) (1) (4) (4) (4) (4) ;
Total Cards Before Turn Ends = 10, Total Cards After Turn Ends = 9
----- ASSERT TRUE FAILED -----
Value LHS: 10
Value RHS: 9
Whose Turn = 0, Expected = 0

 ----- Assertion Failure endTurn -----
File 'dominion.c'
Lines executed:26.52% of 558
Creating 'dominion.c.gcov'

*****unittest3.c:
----------------- Unit Test: whoseTurn ----------------
TEST 1: CHECKING THAT whoseTurn RETURNS CORRECT PLAYER FOR 2 PLAYER GAME
Iteration 0: Whose Turn = 0, Expected = 0
Ending Player 0's Turn
Iteration 1: Whose Turn = 1, Expected = 1
Ending Player 1's Turn
Iteration 2: Whose Turn = 0, Expected = 0
Ending Player 2's Turn
Iteration 3: Whose Turn = 1, Expected = 1
Ending Player 3's Turn
Iteration 4: Whose Turn = 0, Expected = 0
Ending Player 4's Turn
Iteration 5: Whose Turn = 1, Expected = 1
Ending Player 5's Turn
Iteration 6: Whose Turn = 0, Expected = 0
Ending Player 6's Turn
Iteration 7: Whose Turn = 1, Expected = 1
Ending Player 7's Turn
Iteration 8: Whose Turn = 0, Expected = 0
Ending Player 8's Turn
Iteration 9: Whose Turn = 1, Expected = 1
Ending Player 9's Turn
Iteration 10: Whose Turn = 0, Expected = 0
Ending Player 10's Turn
Iteration 11: Whose Turn = 1, Expected = 1
Ending Player 11's Turn
TEST 2: CHECKING THAT whoseTurn RETURNS CORRECT PLAYER FOR 3 PLAYER GAME
Iteration 0: Whose Turn = 0, Expected = 0
Ending Player 0's Turn
Iteration 1: Whose Turn = 1, Expected = 1
Ending Player 1's Turn
Iteration 2: Whose Turn = 2, Expected = 2
Ending Player 2's Turn
Iteration 3: Whose Turn = 0, Expected = 0
Ending Player 3's Turn
Iteration 4: Whose Turn = 1, Expected = 1
Ending Player 4's Turn
Iteration 5: Whose Turn = 2, Expected = 2
Ending Player 5's Turn
Iteration 6: Whose Turn = 0, Expected = 0
Ending Player 6's Turn
Iteration 7: Whose Turn = 1, Expected = 1
Ending Player 7's Turn
Iteration 8: Whose Turn = 2, Expected = 2
Ending Player 8's Turn
Iteration 9: Whose Turn = 0, Expected = 0
Ending Player 9's Turn
Iteration 10: Whose Turn = 1, Expected = 1
Ending Player 10's Turn
Iteration 11: Whose Turn = 2, Expected = 2
Ending Player 11's Turn
TEST 3: CHECKING THAT whoseTurn RETURNS CORRECT PLAYER FOR 4 PLAYER GAME
Iteration 0: Whose Turn = 0, Expected = 0
Ending Player 0's Turn
Iteration 1: Whose Turn = 1, Expected = 1
Ending Player 1's Turn
Iteration 2: Whose Turn = 2, Expected = 2
Ending Player 2's Turn
Iteration 3: Whose Turn = 3, Expected = 3
Ending Player 3's Turn
Iteration 4: Whose Turn = 0, Expected = 0
Ending Player 4's Turn
Iteration 5: Whose Turn = 1, Expected = 1
Ending Player 5's Turn
Iteration 6: Whose Turn = 2, Expected = 2
Ending Player 6's Turn
Iteration 7: Whose Turn = 3, Expected = 3
Ending Player 7's Turn
Iteration 8: Whose Turn = 0, Expected = 0
Ending Player 8's Turn
Iteration 9: Whose Turn = 1, Expected = 1
Ending Player 9's Turn
Iteration 10: Whose Turn = 2, Expected = 2
Ending Player 10's Turn
Iteration 11: Whose Turn = 3, Expected = 3
Ending Player 11's Turn

 >>>>> SUCCESS: Testing complete whoseTurn <<<<<

File 'dominion.c'
Lines executed:27.60% of 558
Creating 'dominion.c.gcov'

*****unittest4.c:
----------------- Unit Test: handCard ----------------
TEST 1: CHECKING THAT handCard RETURNS APPROPRIATE CARDS IN THE HAND
Whose Turn = 0, Expected = 0
Player 0's Hand Count: 5
Cards In Player 0's Hand: 
Card 0: From Hand 4, From handCard() 4
Card 1: From Hand 4, From handCard() 4
Card 2: From Hand 1, From handCard() 1
Card 3: From Hand 4, From handCard() 4
Card 4: From Hand 4, From handCard() 4
;
Ending Player 0's Turn
Player 0's Hand Count After Turn Ends: 0
Ending Cards In Player 0's Hand: 
;
Whose Turn = 1, Expected = 1
Player 1's Hand Count: 5
Cards In Player 1's Hand: 
Card 0: From Hand 4, From handCard() 4
Card 1: From Hand 1, From handCard() 1
Card 2: From Hand 1, From handCard() 1
Card 3: From Hand 4, From handCard() 4
Card 4: From Hand 4, From handCard() 4
;
Ending Player 1's Turn
Player 1's Hand Count After Turn Ends: 0
Ending Cards In Player 1's Hand: 
;
TEST 2: CHECKING THAT handCard RETURNS APPROPRIATE CARDS IN THE HAND AFTER PLAYING SMITHY CARD
Whose Turn = 0, Expected = 0
Player 0's Hand Count: 5
Cards In Player 0's Hand: 
Card 0: From Hand 13, From handCard() 13
Card 1: From Hand 4, From handCard() 4
Card 2: From Hand 1, From handCard() 1
Card 3: From Hand 4, From handCard() 4
Card 4: From Hand 4, From handCard() 4
;
Player 0's Hand Count After Playing Smithy: 7
Cards In Player 0's Hand: 
Card 0: From Hand 4, From handCard() 4
Card 1: From Hand 4, From handCard() 4
Card 2: From Hand 1, From handCard() 1
Card 3: From Hand 4, From handCard() 4
Card 4: From Hand 4, From handCard() 4
Card 5: From Hand 4, From handCard() 4
Card 6: From Hand 4, From handCard() 4
;
Ending Player 0's Turn
Player 0's Hand Count After Turn Ends: 0
Ending Cards In Player 0's Hand: 
;
Whose Turn = 1, Expected = 1
Player 1's Hand Count: 5
Cards In Player 1's Hand: 
Card 0: From Hand 13, From handCard() 13
Card 1: From Hand 1, From handCard() 1
Card 2: From Hand 1, From handCard() 1
Card 3: From Hand 4, From handCard() 4
Card 4: From Hand 4, From handCard() 4
;
Player 1's Hand Count After Playing Smithy: 7
Cards In Player 1's Hand: 
Card 0: From Hand 1, From handCard() 1
Card 1: From Hand 1, From handCard() 1
Card 2: From Hand 1, From handCard() 1
Card 3: From Hand 4, From handCard() 4
Card 4: From Hand 4, From handCard() 4
Card 5: From Hand 4, From handCard() 4
Card 6: From Hand 4, From handCard() 4
;
Ending Player 1's Turn
Player 1's Hand Count After Turn Ends: 0
Ending Cards In Player 1's Hand: 
;

 >>>>> SUCCESS: Testing complete handCard <<<<<

File 'dominion.c'
Lines executed:28.14% of 558
Creating 'dominion.c.gcov'

*****cardtest1.c:
----------------- Testing Card: adventurer ----------------
Adventurer card is positioned in the middle of currentPlayer's hand
TEST 1: ADDING TWO TREASURE CARDS WHEN DECK CONTAINS AT LEAST TWO TREASURE CARDS
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (1) (1) (4) (4) (4) ;
Prior To Test - Coins = 4
After Test - Hand Count = 7, Expected = 6
Ending Cards: (4) (4) (7) (4) (4) (4) (4) ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 4   Which is: COPPER
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 6
TEST 2: SET LOCATION OF TREASURE CARDS TO BE TOP TWO IN DECK
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (13) (1) (14) (4) (5) ;
Prior To Test - Coins = 4
After Test - Hand Count = 7, Expected = 6
Ending Cards: (4) (4) (7) (4) (4) (5) (4) ;
After Test - Deck Count = 3, Expected = 3
Ending Cards: (13) (1) (14) ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 4   Which is: COPPER
Second To Top Card In Hand: 5   Which is: SILVER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 6
TEST 3: SET LOCATION OF TREASURE CARDS TO BE BOTTOM TWO IN DECK
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (4) (5) (13) (1) (14) ;
Prior To Test - Coins = 4
After Test - Hand Count = 7, Expected = 6
Ending Cards: (4) (4) (7) (4) (4) (5) (4) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 4   Which is: COPPER
Second To Top Card In Hand: 5   Which is: SILVER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 6
TEST 4: SET LOCATION OF TREASURE CARDS TO BE BOTTOM AND MIDDLE IN DECK
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (4) (13) (5) (1) (14) ;
Prior To Test - Coins = 4
After Test - Hand Count = 7, Expected = 6
Ending Cards: (4) (4) (7) (4) (4) (5) (4) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 4   Which is: COPPER
Second To Top Card In Hand: 5   Which is: SILVER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 6
TEST 5: SET DECK TO ONLY HAVE A SINGLE TREASURE CARD AND EMPTY DISCARD PILE
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (2) (0) (25) (6) (9) ;
Prior To Test - Coins = 4
After Test - Hand Count = 6, Expected = 6
Ending Cards: (4) (4) (7) (4) (4) (6) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 6   Which is: GOLD
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 1
----- ASSERT TRUE FAILED -----
Value LHS: 2
Value RHS: 1
TEST 6: SET DECK TO ONLY HAVE A SINGLE TREASURE CARD AND DISCARD PILE TO HAVE A SINGLE TREASURE CARD
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (2) (0) (25) (6) (9) ;
Prior To Test - Discard Count: 1
Starting Cards In Deck: (5) ;
Prior To Test - Coins = 4
After Test - Hand Count = 7, Expected = 6
Ending Cards: (4) (4) (7) (4) (4) (6) (5) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 5   Which is: SILVER
Second To Top Card In Hand: 6   Which is: GOLD
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 6

 ----- Assertion Failure adventurer -----
File 'dominion.c'
Lines executed:31.36% of 558
Creating 'dominion.c.gcov'

*****cardtest2.c:
----------------- Testing Card: smithy ----------------
TEST 1: ADDING THREE CARDS WHEN DECK HAS THREE OR MORE CARDS
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (13) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (1) (1) (4) (4) (4) ;
Prior To Test - Coins = 4
Prior To Test - Card Position In Hand = 2
After Test - Hand Count = 7, Expected = 7
Ending Cards: (4) (4) (4) (4) (4) (4) (4) ;
After Test - Deck Count = 2, Expected = 2
(1) (1) ;
After Test - Coins = 4, Expected = 4
TEST 2: DECK ONLY HAS TWO CARDS AND DISCARD PILE IS EMPTY
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (13) (4) (4) ;
Prior To Test - Deck Count: 2
Starting Cards In Deck: (18) (6) ;
Prior To Test - Coins = 4
Prior To Test - Card Position In Hand = 2
After Test - Hand Count = 6, Expected = 6
Ending Cards: (4) (4) (18) (4) (4) (6) ;
After Test - Deck Count = 0, Expected = 0
;
After Test - Coins = 4, Expected = 4
TEST 3: DECK ONLY HAS TWO CARDS AND DISCARD PILE HAS TWO CARDS
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (13) (4) (4) ;
Prior To Test - Deck Count: 2
Starting Cards In Deck: (18) (6) ;
Prior To Test - Discard Count: 2
Starting Cards In Discard: (14) (5) ;
Prior To Test - Coins = 4
Prior To Test - Card Position In Hand = 2
After Test - Hand Count = 7, Expected = 7
Ending Cards: (4) (4) (14) (4) (4) (6) (18) ;
After Test - Deck Count = 1, Expected = 1
(5) ;
After Test - Discard Count = 0, Expected = 0
After Test - Coins = 4, Expected = 4

 >>>>> SUCCESS: Testing complete smithy <<<<<

File 'dominion.c'
Lines executed:31.36% of 558
Creating 'dominion.c.gcov'

*****cardtest3.c:
----------------- Testing Card: sea_hag ----------------
TEST 1: ADDING CURSE CARD TO OTHER PLAYERS
Prior To Test - Current Player's Hand Count: 5
Starting Cards In Current Player's Hand: (4) (4) (25) (4) (4) ;
Prior To Test - Current Player's Deck Count: 5
Starting Cards In Current Player's Deck: (1) (1) (4) (4) (4) ;
Prior To Test - Current Player's Coins = 4
Prior To Test - Other Player's Deck:
Player 1 - Initial Deck Count: 10
Initial Deck Contents: (4) (4) (1) (4) (4) (4) (4) (1) (1) (4) ;
After Test - Hand Count = 5, Expected = 4
After Test - Hand Ending Cards: (4) (4) (25) (4) (4) ;
After Test - Deck Count = 5, Expected = 5
After Test - Deck Ending Cards: (1) (1) (4) (4) (4) ;
After Test - Coins = 4, Expected = 4
----- ASSERT TRUE FAILED -----
Value LHS: 5
Value RHS: 4
Other Player's Deck After Test:
Player 1 - Final Deck Count: 7
Final Deck Contents: (4) (4) (1) (4) (4) (4) (4) ;
Top Card In Player 1's Deck: 4
Curse Card Is: 0
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 10
----- ASSERT TRUE FAILED -----
Value LHS: 4
Value RHS: 0
TEST 2: ADDING CURSE CARD TO OTHER PLAYERS FOR MORE THAN 2 PLAYERS
Prior To Test - Current Player's Hand Count: 5
Starting Cards In Current Player's Hand: (4) (4) (25) (4) (4) ;
Prior To Test - Current Player's Deck Count: 5
Starting Cards In Current Player's Deck: (1) (1) (4) (4) (4) ;
Prior To Test - Current Player's Coins = 4
Prior To Test - Other Player's Deck:
Player 1 - Initial Deck Count: 10
Initial Deck Contents: (4) (4) (1) (4) (4) (4) (4) (1) (1) (4) ;
Player 2 - Initial Deck Count: 10
Initial Deck Contents: (1) (1) (4) (4) (4) (4) (4) (4) (4) (1) ;
Player 3 - Initial Deck Count: 10
Initial Deck Contents: (1) (4) (4) (4) (4) (4) (1) (1) (4) (4) ;
After Test - Hand Count = 5, Expected = 4
After Test - Hand Ending Cards: (4) (4) (25) (4) (4) ;
After Test - Deck Count = 5, Expected = 5
After Test - Deck Ending Cards: (1) (1) (4) (4) (4) ;
After Test - Coins = 4, Expected = 4
----- ASSERT TRUE FAILED -----
Value LHS: 5
Value RHS: 4
Other Player's Deck After Test:
Player 1 - Final Deck Count: 7
Final Deck Contents: (4) (4) (1) (4) (4) (4) (4) ;
Top Card In Player 1's Deck: 4
Curse Card Is: 0
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 10
----- ASSERT TRUE FAILED -----
Value LHS: 4
Value RHS: 0
Player 2 - Final Deck Count: 7
Final Deck Contents: (1) (1) (4) (4) (4) (4) (4) ;
Top Card In Player 2's Deck: 4
Curse Card Is: 0
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 10
----- ASSERT TRUE FAILED -----
Value LHS: 4
Value RHS: 0
Player 3 - Final Deck Count: 7
Final Deck Contents: (1) (4) (4) (4) (4) (4) (1) ;
Top Card In Player 3's Deck: 1
Curse Card Is: 0
----- ASSERT TRUE FAILED -----
Value LHS: 7
Value RHS: 10
----- ASSERT TRUE FAILED -----
Value LHS: 1
Value RHS: 0

 ----- Assertion Failure sea_hag -----
File 'dominion.c'
Lines executed:32.62% of 558
Creating 'dominion.c.gcov'

*****cardtest4.c:
----------------- Testing Card: village ----------------
TEST 1: ADDING CARD AND ACTION WHEN DECK HAS AT LEAST ONE CARD IN IT
Prior To Test - Current Player's Hand Count: 5
Starting Cards In Current Player's Hand: (4) (4) (14) (4) (4) ;
Prior To Test - Current Player's Deck Count: 5
Starting Cards In Current Player's Deck: (1) (1) (4) (4) (4) ;
Prior To Test - Current Player's Coins = 4
Prior To Test - Current Player's Actions = 1
After Test - Hand Count = 5, Expected = 5
After Test - Hand Ending Cards: (4) (4) (4) (4) (4) ;
After Test - Deck Count = 4, Expected = 4
After Test - Deck Cards: (1) (1) (4) (4) ;
After Test - Coins = 4, Expected = 4
After Test - Actions = 3, Expected = 3
TEST 2: ADDING CARD AND ACTION WHEN DECK AND DISCARD ARE EMPTY
Prior To Test - Current Player's Hand Count: 5
Starting Cards In Current Player's Hand: (4) (4) (14) (4) (4) ;
Prior To Test - Current Player's Deck Count: 0
Starting Cards In Current Player's Deck: ;
Prior To Test - Current Player's Coins = 4
Prior To Test - Current Player's Actions = 1
After Test - Hand Count = 4, Expected = 4
Ending Cards: (4) (4) (4) (4) ;
After Test - Deck Count = 0, Expected = 0
After Test - Coins = 4, Expected = 4
After Test - Actions = 3, Expected = 3
TEST 3: ADDING CARD AND ACTION WHEN DECK IS EMPTY BUT DISCARD IS NOT EMPTY
Prior To Test - Current Player's Hand Count: 5
Starting Cards In Current Player's Hand: (4) (4) (14) (4) (4) ;
Prior To Test - Current Player's Deck Count: 0
Starting Cards In Current Player's Deck: ;
Prior To Test - Current Player's Discard Count: 2
Starting Cards In Current Player's Discard Pile: (14) (5) ;
Prior To Test - Current Player's Coins = 4
Prior To Test - Current Player's Actions = 1
After Test - Hand Count = 5, Expected = 5
Ending Cards: (4) (4) (14) (4) (4) ;
After Test - Deck Count = 1, Expected = 1
After Test - Cards In Current Player's Deck: (5) ;
After Test - Discard Count = 0, Expected = 0
After Test - Coins = 4, Expected = 4
After Test - Actions = 3, Expected = 3

 >>>>> SUCCESS: Testing complete village <<<<<

File 'dominion.c'
Lines executed:34.59% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      682:    8:int compare(const void* a, const void* b) {
      682:    9:  if (*(int*)a > *(int*)b)
       78:   10:    return 1;
      604:   11:  if (*(int*)a < *(int*)b)
      131:   12:    return -1;
      473:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
       11:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       11:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      121:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1210:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        3:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      231:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1815:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1705:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      110:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      110:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      110:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1595:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       38:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       27:  140:      state->deckCount[i] = 0;
      108:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       81:  143:	  state->deck[i][j] = estate;
       81:  144:	  state->deckCount[i]++;
        -:  145:	}
      216:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      189:  148:	  state->deck[i][j] = copper;
      189:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       38:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       27:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       38:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       27:  166:      state->handCount[i] = 0;
       27:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      308:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      297:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       66:  192:  for (it = 0; it < 5; it++){
       55:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       11:  198:  return 0;
        -:  199:}
        -:  200:
       50:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       50:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       50:  209:  if (state->deckCount[player] < 1)
        5:  210:    return -1;
       45:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      509:  214:  while (state->deckCount[player] > 0) {
      419:  215:    card = floor(Random() * state->deckCount[player]);
      419:  216:    newDeck[newDeckPos] = state->deck[player][card];
      419:  217:    newDeckPos++;
     1397:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      978:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      419:  221:    state->deckCount[player]--;
        -:  222:  }
      464:  223:  for (i = 0; i < newDeckPos; i++) {
      419:  224:    state->deck[player][i] = newDeck[i];
      419:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       45:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       68:  315:int handCard(int handPos, struct gameState *state) {
       68:  316:  int currentPlayer = whoseTurn(state);
       68:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       28:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       28:  326:  int count = 0;
        -:  327:
      238:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      210:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
       98:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
       70:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
       52:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
       24:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       28:  343:  return count;
        -:  344:}
        -:  345:
      187:  346:int whoseTurn(struct gameState *state) {
      187:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
       44:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       44:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      272:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      228:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      228:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       44:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       44:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       27:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       17:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       44:  370:  state->outpostPlayed = 0;
       44:  371:  state->phase = 0;
       44:  372:  state->numActions = 1;
       44:  373:  state->coins = 0;
       44:  374:  state->numBuys = 1;
       44:  375:  state->playedCardCount = 0;
       44:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      264:  380:  for (k = 0; k < 5; k++){
      220:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       44:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       44:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      325:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      325:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      170:  533:    for (i = 0; i < state->discardCount[player];i++){
      149:  534:      state->deck[player][i] = state->discard[player][i];
      149:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       21:  538:    state->deckCount[player] = state->discardCount[player];
       21:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       21:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       21:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       21:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       21:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       21:  559:    if (deckCounter == 0)
        3:  560:      return -1;
        -:  561:
       18:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       18:  563:    state->deckCount[player]--;
       18:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      304:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      304:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      304:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      304:  576:    state->deckCount[player]--;
      304:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      322:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        3:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        3:  653:  int currentPlayer = whoseTurn(state);
        3:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        3:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        3:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        -:  660:  /*int z = 0;// this is the counter for the temp hand*/
        3:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        3:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:            return playAdventurer(state, &drawntreasure, currentPlayer, temphand);
        -:  671:      /*while(drawntreasure<2){
        -:  672:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  673:	  shuffle(currentPlayer, state);
        -:  674:	}
        -:  675:	drawCard(currentPlayer, state);
        -:  676:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  677:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  678:	  drawntreasure++;
        -:  679:	else{
        -:  680:	  temphand[z]=cardDrawn;
        -:  681:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  682:	  z++;
        -:  683:	}
        -:  684:      }
        -:  685:      while(z-1>=0){
        -:  686:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  687:	z=z-1;
        -:  688:      }
        -:  689:      return 0;*/
        -:  690:			
        -:  691:    case council_room:
        -:  692:      //+4 Cards
    #####:  693:      for (i = 0; i < 4; i++)
        -:  694:	{
    #####:  695:	  drawCard(currentPlayer, state);
        -:  696:	}
        -:  697:			
        -:  698:      //+1 Buy
    #####:  699:      state->numBuys++;
        -:  700:			
        -:  701:      //Each other player draws a card
    #####:  702:      for (i = 0; i < state->numPlayers; i++)
        -:  703:	{
    #####:  704:	  if ( i != currentPlayer )
        -:  705:	    {
    #####:  706:	      drawCard(i, state);
        -:  707:	    }
        -:  708:	}
        -:  709:			
        -:  710:      //put played card in played card pile
    #####:  711:      discardCard(handPos, currentPlayer, state, 0);
        -:  712:			
    #####:  713:      return 0;
        -:  714:			
        -:  715:    case feast:
        -:  716:      //gain card with cost up to 5
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  719:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  721:      }
        -:  722:      //Backup hand
        -:  723:
        -:  724:      //Update Coins for Buy
    #####:  725:      updateCoins(currentPlayer, state, 5);
    #####:  726:      x = 1;//Condition to loop on
    #####:  727:      while( x == 1) {//Buy one card
    #####:  728:	if (supplyCount(choice1, state) <= 0){
        -:  729:	  if (DEBUG)
        -:  730:	    printf("None of that card left, sorry!\n");
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  734:	  }
        -:  735:	}
    #####:  736:	else if (state->coins < getCost(choice1)){
    #####:  737:	  printf("That card is too expensive!\n");
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  741:	  }
        -:  742:	}
        -:  743:	else{
        -:  744:
        -:  745:	  if (DEBUG){
        -:  746:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:	  }
        -:  748:
    #####:  749:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  750:	  x = 0;//No more buying cards
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
        -:  756:	}
        -:  757:      }     
        -:  758:
        -:  759:      //Reset Hand
    #####:  760:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  761:	state->hand[currentPlayer][i] = temphand[i];
    #####:  762:	temphand[i] = -1;
        -:  763:      }
        -:  764:      //Reset Hand
        -:  765:      			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case gardens:
    #####:  769:      return -1;
        -:  770:			
        -:  771:    case mine:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:		
    #####:  779:      if (choice2 > treasure_map || choice2 < curse)
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:
    #####:  784:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      gainCard(choice2, state, 2, currentPlayer);
        -:  790:
        -:  791:      //discard card from hand
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:
        -:  794:      //discard trashed card
    #####:  795:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  796:	{
    #####:  797:	  if (state->hand[currentPlayer][i] == j)
        -:  798:	    {
    #####:  799:	      discardCard(i, currentPlayer, state, 0);			
    #####:  800:	      break;
        -:  801:	    }
        -:  802:	}
        -:  803:			
    #####:  804:      return 0;
        -:  805:			
        -:  806:    case remodel:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:
    #####:  814:      gainCard(choice2, state, 0, currentPlayer);
        -:  815:
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:
        -:  819:      //discard trashed card
    #####:  820:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  821:	{
    #####:  822:	  if (state->hand[currentPlayer][i] == j)
        -:  823:	    {
    #####:  824:	      discardCard(i, currentPlayer, state, 0);			
    #####:  825:	      break;
        -:  826:	    }
        -:  827:	}
        -:  828:
        -:  829:
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case smithy:
        -:  833:            //+3 Cards
    #####:  834:            return playSmithy(state, currentPlayer, handPos);
        -:  835:     /* for (i = 0; i < 3; i++)
        -:  836:	{
        -:  837:	  drawCard(currentPlayer, state);
        -:  838:	}
        -:  839:			
        -:  840:      //discard card from hand
        -:  841:      discardCard(handPos, currentPlayer, state, 0);
        -:  842:      return 0;*/
        -:  843:		
        -:  844:    case village:
        -:  845:      //+1 Card
        3:  846:      drawCard(currentPlayer, state);
        -:  847:			
        -:  848:      //+2 Actions
        3:  849:      state->numActions = state->numActions + 2;
        -:  850:			
        -:  851:      //discard played card from hand
        3:  852:      discardCard(handPos, currentPlayer, state, 0);
        3:  853:      return 0;
        -:  854:		
        -:  855:    case baron:
    #####:  856:      state->numBuys++;//Increase buys by 1!
    #####:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
        -:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
        -:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
    #####:  881:		isGameOver(state);
        -:  882:	      }
        -:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
        -:  886:			    
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:			    
        -:  893:      else{
    #####:  894:	if (supplyCount(estate, state) > 0){
    #####:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  896:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  897:	  if (supplyCount(estate, state) == 0){
    #####:  898:	    isGameOver(state);
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:	    
        -:  903:      
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case great_hall:
        -:  907:      //+1 Card
    #####:  908:      drawCard(currentPlayer, state);
        -:  909:			
        -:  910:      //+1 Actions
    #####:  911:      state->numActions++;
        -:  912:			
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case minion:
    #####:  918:            return playMinion(state, currentPlayer, handPos, choice1, choice2);
        -:  919:      /*//+1 action
        -:  920:      state->numActions++;
        -:  921:			
        -:  922:      //discard card from hand
        -:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:			
        -:  925:      if (choice1)		//+2 coins
        -:  926:	{
        -:  927:	  state->coins = state->coins + 2;
        -:  928:	}
        -:  929:			
        -:  930:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  931:	{
        -:  932:	  //discard hand
        -:  933:	  while(numHandCards(state) > 0)
        -:  934:	    {
        -:  935:	      discardCard(handPos, currentPlayer, state, 0);
        -:  936:	    }
        -:  937:				
        -:  938:	  //draw 4
        -:  939:	  for (i = 0; i < 4; i++)
        -:  940:	    {
        -:  941:	      drawCard(currentPlayer, state);
        -:  942:	    }
        -:  943:				
        -:  944:	  //other players discard hand and redraw if hand size > 4
        -:  945:	  for (i = 0; i < state->numPlayers; i++)
        -:  946:	    {
        -:  947:	      if (i != currentPlayer)
        -:  948:		{
        -:  949:		  if ( state->handCount[i] > 4 )
        -:  950:		    {
        -:  951:		      //discard hand
        -:  952:		      while( state->handCount[i] > 0 )
        -:  953:			{
        -:  954:			  discardCard(handPos, i, state, 0);
        -:  955:			}
        -:  956:							
        -:  957:		      //draw 4
        -:  958:		      for (j = 0; j < 4; j++)
        -:  959:			{
        -:  960:			  drawCard(i, state);
        -:  961:			}
        -:  962:		    }
        -:  963:		}
        -:  964:	    }
        -:  965:				
        -:  966:	}
        -:  967:      return 0;*/
        -:  968:		
        -:  969:    case steward:
    #####:  970:            return playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
        -:  971:      /*if (choice1 == 1)
        -:  972:	{
        -:  973:	  //+2 cards
        -:  974:	  drawCard(currentPlayer, state);
        -:  975:	  drawCard(currentPlayer, state);
        -:  976:	}
        -:  977:      else if (choice1 == 2)
        -:  978:	{
        -:  979:	  //+2 coins
        -:  980:	  state->coins = state->coins + 2;
        -:  981:	}
        -:  982:      else
        -:  983:	{
        -:  984:	  //trash 2 cards in hand
        -:  985:	  discardCard(choice2, currentPlayer, state, 1);
        -:  986:	  discardCard(choice3, currentPlayer, state, 1);
        -:  987:	}
        -:  988:			
        -:  989:      //discard card from hand
        -:  990:      discardCard(handPos, currentPlayer, state, 0);
        -:  991:      return 0;*/
        -:  992:		
        -:  993:    case tribute:
    #####:  994:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  995:	if (state->deckCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  997:	  state->deckCount[nextPlayer]--;
        -:  998:	}
    #####:  999:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1001:	  state->discardCount[nextPlayer]--;
        -: 1002:	}
        -: 1003:	else{
        -: 1004:	  //No Card to Reveal
        -: 1005:	  if (DEBUG){
        -: 1006:	    printf("No cards to reveal\n");
        -: 1007:	  }
        -: 1008:	}
        -: 1009:      }
        -: 1010:	    
        -: 1011:      else{
    #####: 1012:	if (state->deckCount[nextPlayer] == 0){
    #####: 1013:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1014:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1015:	    state->deckCount[nextPlayer]++;
    #####: 1016:	    state->discard[nextPlayer][i] = -1;
    #####: 1017:	    state->discardCount[nextPlayer]--;
        -: 1018:	  }
        -: 1019:			    
    #####: 1020:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1021:	} 
    #####: 1022:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1024:	state->deckCount[nextPlayer]--;
    #####: 1025:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
        -: 1028:      }    
        -: 1029:		       
    #####: 1030:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1031:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1032:	state->playedCardCount++;
    #####: 1033:	tributeRevealedCards[1] = -1;
        -: 1034:      }
        -: 1035:
    #####: 1036:      for (i = 0; i <= 2; i ++){
    #####: 1037:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1038:	  state->coins += 2;
        -: 1039:	}
        -: 1040:		    
    #####: 1041:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1042:	  drawCard(currentPlayer, state);
    #####: 1043:	  drawCard(currentPlayer, state);
        -: 1044:	}
        -: 1045:	else{//Action Card
    #####: 1046:	  state->numActions = state->numActions + 2;
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case ambassador:
    #####: 1053:      j = 0;		//used to check if player has enough cards to discard
        -: 1054:
    #####: 1055:      if (choice2 > 2 || choice2 < 0)
        -: 1056:	{
    #####: 1057:	  return -1;				
        -: 1058:	}
        -: 1059:
    #####: 1060:      if (choice1 == handPos)
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:
    #####: 1065:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1066:	{
    #####: 1067:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1068:	    {
    #####: 1069:	      j++;
        -: 1070:	    }
        -: 1071:	}
    #####: 1072:      if (j < choice2)
        -: 1073:	{
    #####: 1074:	  return -1;				
        -: 1075:	}
        -: 1076:
        -: 1077:      if (DEBUG) 
        -: 1078:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1079:
        -: 1080:      //increase supply count for choosen card by amount being discarded
    #####: 1081:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1082:			
        -: 1083:      //each other player gains a copy of revealed card
    #####: 1084:      for (i = 0; i < state->numPlayers; i++)
        -: 1085:	{
    #####: 1086:	  if (i != currentPlayer)
        -: 1087:	    {
    #####: 1088:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1089:	    }
        -: 1090:	}
        -: 1091:
        -: 1092:      //discard played card from hand
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1094:
        -: 1095:      //trash copies of cards returned to supply
    #####: 1096:      for (j = 0; j < choice2; j++)
        -: 1097:	{
    #####: 1098:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1099:	    {
    #####: 1100:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1101:		{
    #####: 1102:		  discardCard(i, currentPlayer, state, 1);
    #####: 1103:		  break;
        -: 1104:		}
        -: 1105:	    }
        -: 1106:	}			
        -: 1107:
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case cutpurse:
        -: 1111:
    #####: 1112:      updateCoins(currentPlayer, state, 2);
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
        -: 1116:	    {
    #####: 1117:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1118:		{
    #####: 1119:		  if (state->hand[i][j] == copper)
        -: 1120:		    {
    #####: 1121:		      discardCard(j, i, state, 0);
    #####: 1122:		      break;
        -: 1123:		    }
    #####: 1124:		  if (j == state->handCount[i])
        -: 1125:		    {
    #####: 1126:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1127:			{
        -: 1128:			  if (DEBUG)
        -: 1129:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1130:			}	
    #####: 1131:		      break;
        -: 1132:		    }		
        -: 1133:		}
        -: 1134:					
        -: 1135:	    }
        -: 1136:				
        -: 1137:	}				
        -: 1138:
        -: 1139:      //discard played card from hand
    #####: 1140:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1141:
    #####: 1142:      return 0;
        -: 1143:
        -: 1144:		
        -: 1145:    case embargo: 
        -: 1146:      //+2 Coins
    #####: 1147:      state->coins = state->coins + 2;
        -: 1148:			
        -: 1149:      //see if selected pile is in play
    #####: 1150:      if ( state->supplyCount[choice1] == -1 )
        -: 1151:	{
    #####: 1152:	  return -1;
        -: 1153:	}
        -: 1154:			
        -: 1155:      //add embargo token to selected supply pile
    #####: 1156:      state->embargoTokens[choice1]++;
        -: 1157:			
        -: 1158:      //trash card
    #####: 1159:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case outpost:
        -: 1163:      //set outpost flag
    #####: 1164:      state->outpostPlayed++;
        -: 1165:			
        -: 1166:      //discard card
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case salvager:
        -: 1171:      //+1 buy
    #####: 1172:      state->numBuys++;
        -: 1173:			
    #####: 1174:      if (choice1)
        -: 1175:	{
        -: 1176:	  //gain coins equal to trashed card
    #####: 1177:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1178:	  //trash card
    #####: 1179:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1180:	}
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case sea_hag:
    #####: 1187:            return playSeaHag(state, currentPlayer);
        -: 1188:      /*for (i = 0; i < state->numPlayers; i++){
        -: 1189:	if (i != currentPlayer){
        -: 1190:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1191:	  state->discardCount[i]++;
        -: 1192:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1193:	}
        -: 1194:      }
        -: 1195:      return 0;*/
        -: 1196:		
        -: 1197:    case treasure_map:
        -: 1198:      //search hand for another treasure_map
    #####: 1199:      index = -1;
    #####: 1200:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1201:	{
    #####: 1202:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1203:	    {
    #####: 1204:	      index = i;
    #####: 1205:	      break;
        -: 1206:	    }
        -: 1207:	}
    #####: 1208:      if (index > -1)
        -: 1209:	{
        -: 1210:	  //trash both treasure cards
    #####: 1211:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1212:	  discardCard(index, currentPlayer, state, 1);
        -: 1213:
        -: 1214:	  //gain 4 Gold cards
    #####: 1215:	  for (i = 0; i < 4; i++)
        -: 1216:	    {
    #####: 1217:	      gainCard(gold, state, 1, currentPlayer);
        -: 1218:	    }
        -: 1219:				
        -: 1220:	  //return success
    #####: 1221:	  return 1;
        -: 1222:	}
        -: 1223:			
        -: 1224:      //no second treasure_map found in hand
    #####: 1225:      return -1;
        -: 1226:    }
        -: 1227:	
    #####: 1228:  return -1;
        -: 1229:}
        -: 1230:
        6: 1231:int playAdventurer(struct gameState *state, int *drawntreasure,
        -: 1232:                   int currentPlayer, int *temphand) {
        6: 1233:    int z = 0;// this is the counter for the temp hand
        -: 1234:    int cardDrawn;
       38: 1235:    while((*drawntreasure)<2){
       26: 1236:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2: 1237:            shuffle(currentPlayer, state);
        -: 1238:        }
       26: 1239:        drawCard(currentPlayer, state);
       26: 1240:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       26: 1241:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12: 1242:            (*drawntreasure)++;
        -: 1243:        else{
       14: 1244:            temphand[z]=cardDrawn;
       14: 1245:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       14: 1246:            z++;
        -: 1247:        }
        -: 1248:    }
       26: 1249:    while(z-1>=0){
       14: 1250:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       14: 1251:        z=z-1;
        -: 1252:    }
        6: 1253:    return 0;
        -: 1254:}
        -: 1255:
        7: 1256:int playSmithy(struct gameState *state, int currentPlayer, int handPos) {
        -: 1257:    int i;
        -: 1258:    //+3 cards
       28: 1259:    for (i = 0; i < 3; i++)
        -: 1260:    {
       21: 1261:        drawCard(currentPlayer, state);
        -: 1262:    }
        -: 1263:    
        -: 1264:    //discard card from hand
        7: 1265:    discardCard(handPos, currentPlayer, state, 0);
        7: 1266:    return 0;
        -: 1267:}
        -: 1268:
        2: 1269:int playSeaHag(struct gameState *state, int currentPlayer) {
        -: 1270:    int i;
        8: 1271:    for (i = 0; i < state->numPlayers; i++){
        6: 1272:        if (i != currentPlayer){
        4: 1273:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        4: 1274:            state->discardCount[i]++;
        4: 1275:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1276:        }
        -: 1277:    }
        2: 1278:    return 0;
        -: 1279:}
        -: 1280:
    #####: 1281:int playSteward(struct gameState *state, int currentPlayer, int handPos, int choice1,
        -: 1282:                int choice2, int choice3) {
    #####: 1283:    if (choice1 == 1)
        -: 1284:    {
        -: 1285:        //+2 cards
    #####: 1286:        drawCard(currentPlayer, state);
    #####: 1287:        drawCard(currentPlayer, state);
        -: 1288:    }
    #####: 1289:    else if (choice1 == 2)
        -: 1290:    {
        -: 1291:        //+2 coins
    #####: 1292:        state->coins = state->coins + 2;
        -: 1293:    }
        -: 1294:    else
        -: 1295:    {
        -: 1296:        //trash 2 cards in hand
    #####: 1297:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1298:        discardCard(choice3, currentPlayer, state, 1);
        -: 1299:    }
        -: 1300:    
        -: 1301:    //discard card from hand
    #####: 1302:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1303:    return 0;
        -: 1304:}
        -: 1305:
    #####: 1306:int playMinion(struct gameState *state, int currentPlayer, int handPos,
        -: 1307:               int choice1, int choice2) {
        -: 1308:    
        -: 1309:    int i;
        -: 1310:    int j;
        -: 1311:    //+1 action
    #####: 1312:    state->numActions++;
        -: 1313:    
        -: 1314:    //discard card from hand
    #####: 1315:    discardCard(handPos, currentPlayer, state, 0);
        -: 1316:    
    #####: 1317:    if (choice1)		//+2 coins
        -: 1318:    {
    #####: 1319:        state->coins = state->coins + 2;
        -: 1320:    }
        -: 1321:    
    #####: 1322:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1323:    {
        -: 1324:        //discard hand
    #####: 1325:        while(numHandCards(state) > 0)
        -: 1326:        {
    #####: 1327:            discardCard(handPos, currentPlayer, state, 0);
        -: 1328:        }
        -: 1329:        
        -: 1330:        //draw 4
    #####: 1331:        for (i = 0; i < 4; i++)
        -: 1332:        {
    #####: 1333:            drawCard(currentPlayer, state);
        -: 1334:        }
        -: 1335:        
        -: 1336:        //other players discard hand and redraw if hand size > 4
    #####: 1337:        for (i = 0; i < state->numPlayers; i++)
        -: 1338:        {
    #####: 1339:            if (i != currentPlayer)
        -: 1340:            {
    #####: 1341:                if ( state->handCount[i] > 4 )
        -: 1342:                {
        -: 1343:                    //discard hand
    #####: 1344:                    while( state->handCount[i] > 0 )
        -: 1345:                    {
    #####: 1346:                        discardCard(handPos, i, state, 0);
        -: 1347:                    }
        -: 1348:                    
        -: 1349:                    //draw 4
    #####: 1350:                    for (j = 0; j < 4; j++)
        -: 1351:                    {
    #####: 1352:                        drawCard(i, state);
        -: 1353:                    }
        -: 1354:                }
        -: 1355:            }
        -: 1356:        }
        -: 1357:        
        -: 1358:    }
    #####: 1359:    return 0;
        -: 1360:}
        -: 1361:
       10: 1362:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1363:{
        -: 1364:	
        -: 1365:  //if card is not trashed, added to Played pile 
       10: 1366:  if (trashFlag < 1)
        -: 1367:    {
        -: 1368:      //add card to played pile
       10: 1369:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1370:      state->playedCardCount++;
        -: 1371:    }
        -: 1372:	
        -: 1373:  //set played card to -1
       10: 1374:  state->hand[currentPlayer][handPos] = -1;
        -: 1375:	
        -: 1376:  //remove card from player's hand
       10: 1377:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1378:    {
        -: 1379:      //reduce number of cards in hand
    #####: 1380:      state->handCount[currentPlayer]--;
        -: 1381:    }
       10: 1382:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1383:    {
        -: 1384:      //reduce number of cards in hand
    #####: 1385:      state->handCount[currentPlayer]--;
        -: 1386:    }
        -: 1387:  else 	
        -: 1388:    {
        -: 1389:      //replace discarded card with last card in hand
       10: 1390:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1391:      //set last card to -1
       10: 1392:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1393:      //reduce number of cards in hand
       10: 1394:      state->handCount[currentPlayer]--;
        -: 1395:    }
        -: 1396:	
       10: 1397:  return 0;
        -: 1398:}
        -: 1399:
    #####: 1400:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1401:{
        -: 1402:  //Note: supplyPos is enum of choosen card
        -: 1403:	
        -: 1404:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1405:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1406:    {
    #####: 1407:      return -1;
        -: 1408:    }
        -: 1409:	
        -: 1410:  //added card for [whoseTurn] current player:
        -: 1411:  // toFlag = 0 : add to discard
        -: 1412:  // toFlag = 1 : add to deck
        -: 1413:  // toFlag = 2 : add to hand
        -: 1414:
    #####: 1415:  if (toFlag == 1)
        -: 1416:    {
    #####: 1417:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1418:      state->deckCount[player]++;
        -: 1419:    }
    #####: 1420:  else if (toFlag == 2)
        -: 1421:    {
    #####: 1422:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1423:      state->handCount[player]++;
        -: 1424:    }
        -: 1425:  else
        -: 1426:    {
    #####: 1427:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1428:      state->discardCount[player]++;
        -: 1429:    }
        -: 1430:	
        -: 1431:  //decrease number in supply pile
    #####: 1432:  state->supplyCount[supplyPos]--;
        -: 1433:	 
    #####: 1434:  return 0;
        -: 1435:}
        -: 1436:
       55: 1437:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1438:{
        -: 1439:  int i;
        -: 1440:	
        -: 1441:  //reset coin count
       55: 1442:  state->coins = 0;
        -: 1443:
        -: 1444:  //add coins for each Treasure card in player's hand
      330: 1445:  for (i = 0; i < state->handCount[player]; i++)
        -: 1446:    {
      275: 1447:      if (state->hand[player][i] == copper)
        -: 1448:	{
      193: 1449:	  state->coins += 1;
        -: 1450:	}
       82: 1451:      else if (state->hand[player][i] == silver)
        -: 1452:	{
    #####: 1453:	  state->coins += 2;
        -: 1454:	}
       82: 1455:      else if (state->hand[player][i] == gold)
        -: 1456:	{
    #####: 1457:	  state->coins += 3;
        -: 1458:	}	
        -: 1459:    }	
        -: 1460:
        -: 1461:  //add bonus
       55: 1462:  state->coins += bonus;
        -: 1463:
       55: 1464:  return 0;
        -: 1465:}
        -: 1466:
        -: 1467:
        -: 1468://end of dominion.c
        -: 1469:

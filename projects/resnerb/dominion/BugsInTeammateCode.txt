Bug Report #1 – This is a very interesting and important bug because is causes a crash!Title: Segmentation Fault Occurs When Playing Adventurer Card with Less Than Two Treasure Cards In Combined Hand/Deck/DiscardDescription: When a player plays an Adventurer card with less than two treasure cards in their combined hand, deck, and discard pile it will result in a Segmentation Fault. The Segmentation Fault causes the dominion game to crash and prevents the player from continuing their current game. The game state is lost which means the game cannot be restored to its previous state. When a player has less than two treasure cards in their combined Hand/Deck/Discard the code should only grab what is available. So if the player has zero treasure cards in the Hand/Deck/Discard, then no treasure cards should be added to the player's hand. And if the player has one treasure card in the Hand/Deck/Discard, then only one treasure card should be added to the player's hand.This bug was found using the randomtestadventurer.c random test. The randomtestadventurer.out file indicated when and where the ASSERT statements failed within the test code which really helped to narrow down the cause of the error. How I found the real bug is detailed in the Debugging section below.Steps to Recreate:1) Set the gameState to have less than two treasure cards in the Hand/Deck/Discard (either zero or one)2) Call the adventurer_CARD method (via randomtestadventurer.c)Result: Segmentation Fault will occur and dominion game crashesBug Report #2 – This is a bug that my teammate implemented in his code that reduced the correct number of by one. This bug was a good one because it is an error that could easily slip under the radar and happen real life. This bug generated a lot of errors! Especially in the random test that I ran; every iteration caused an ASSERT error (Over 4000 errors!).Title: Smithy Card Method Does Not Add Correct Number Of Cards To Player's HandDescription: Instead of the Smithy adding three cards to the player's hand, it only adds two cards. This is because the loop counter that calls the drawCard method is set to two, when it should actually be set to three. This is something that could easily go unnoticed and change the way dominion is played. This also gives a disadvantage to the player who played the Smithy card by not giving them an additional card that could potentially change their success in the game, thus limiting the options the player has within dominion. This generates a false/untrue game state. Both my unit test and random test came in very handy when testing the smithy_CARD method. Without the unit and random tests this bug could easily go unnoticed. Every one of my unit tests failed and every iteration of my random test failed. The ASSERT errors all indicated that the handCount was off by one, which meant the smithy_CARD method was not adding the correct number of cards to the player's hand.Steps to Recreate:1) Create any valid game state2) Call smithy_CARD method (via randomtestcard1.c)Result: Player's hand count will only increase by two cards
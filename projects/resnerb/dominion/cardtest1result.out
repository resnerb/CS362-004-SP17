----------------- Testing Card: adventurer ----------------
Adventurer card is positioned in the middle of currentPlayer's hand
TEST 1: ADDING TWO TREASURE CARDS WHEN DECK CONTAINS AT LEAST TWO TREASURE CARDS
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (1) (1) (4) (4) (4) ;
Prior To Test - Coins = 4
After Test - Hand Count = 6, Expected = 6
Ending Cards: (4) (4) (4) (4) (4) (4) ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 4   Which is: COPPER
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
TEST 2: SET LOCATION OF TREASURE CARDS TO BE TOP TWO IN DECK
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (13) (1) (14) (4) (5) ;
Prior To Test - Coins = 4
After Test - Hand Count = 6, Expected = 6
Ending Cards: (4) (4) (4) (4) (4) (5) ;
After Test - Deck Count = 3, Expected = 3
Ending Cards: (13) (1) (14) ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 5   Which is: SILVER
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
TEST 3: SET LOCATION OF TREASURE CARDS TO BE BOTTOM TWO IN DECK
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (4) (5) (13) (1) (14) ;
Prior To Test - Coins = 4
After Test - Hand Count = 6, Expected = 6
Ending Cards: (4) (4) (4) (4) (4) (5) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 5   Which is: SILVER
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
TEST 4: SET LOCATION OF TREASURE CARDS TO BE BOTTOM AND MIDDLE IN DECK
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (4) (13) (5) (1) (14) ;
Prior To Test - Coins = 4
After Test - Hand Count = 6, Expected = 6
Ending Cards: (4) (4) (4) (4) (4) (5) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 5   Which is: SILVER
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2
TEST 5: SET DECK TO ONLY HAVE A SINGLE TREASURE CARD AND EMPTY DISCARD PILE
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (2) (0) (25) (6) (9) ;
Prior To Test - Coins = 4
After Test - Hand Count = 5, Expected = 5
Ending Cards: (4) (4) (6) (4) (4) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 4   Which is: COPPER
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 1, Expected = 1
TEST 6: SET DECK TO ONLY HAVE A SINGLE TREASURE CARD AND DISCARD PILE TO HAVE A SINGLE TREASURE CARD
Prior To Test - Hand Count: 5
Starting Cards In Hand: (4) (4) (7) (4) (4) ;
Prior To Test - Deck Count: 5
Starting Cards In Deck: (2) (0) (25) (6) (9) ;
Prior To Test - Discard Count: 1
Starting Cards In Deck: (5) ;
Prior To Test - Coins = 4
After Test - Hand Count = 6, Expected = 6
Ending Cards: (4) (4) (5) (4) (4) (6) ;
After Test - Deck Count = 0, Expected = 0
Ending Cards: ;
Checking Cards Added To Hand Are Treasure Cards: 
Top Card In Hand: 6   Which is: GOLD
Second To Top Card In Hand: 4   Which is: COPPER
After Test - Coins = 4, Expected = 4
After Test - DrawnTreasure = 2, Expected = 2

 >>>>> SUCCESS: Testing complete adventurer <<<<<

File 'dominion.c'
Lines executed:23.39% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Bryan Resner - CS362 Spring 2017 - Refactored Code */
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       30:   13:  if (*(int*)a < *(int*)b)
        8:   14:    return -1;
       22:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        1:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       11:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      110:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       21:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      165:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       10:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    #####:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        3:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
        8:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        -:  147:	}
       16:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        3:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        3:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       28:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
        6:  194:  for (it = 0; it < 5; it++){
        5:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        -:  201:}
        -:  202:
        6:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        6:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        6:  211:  if (state->deckCount[player] < 1)
        3:  212:    return -1;
        3:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       27:  216:  while (state->deckCount[player] > 0) {
       21:  217:    card = floor(Random() * state->deckCount[player]);
       21:  218:    newDeck[newDeckPos] = state->deck[player][card];
       21:  219:    newDeckPos++;
       71:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       50:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       21:  223:    state->deckCount[player]--;
        -:  224:  }
       24:  225:  for (i = 0; i < newDeckPos; i++) {
       21:  226:    state->deck[player][i] = newDeck[i];
       21:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        3:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
    #####:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       31:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       31:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
        3:  535:    for (i = 0; i < state->discardCount[player];i++){
        1:  536:      state->deck[player][i] = state->discard[player][i];
        1:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
        2:  540:    state->deckCount[player] = state->discardCount[player];
        2:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        2:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        2:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        2:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        2:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        2:  561:    if (deckCounter == 0)
        1:  562:      return -1;
        -:  563:
        1:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  565:    state->deckCount[player]--;
        1:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       29:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       29:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       29:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       29:  578:    state->deckCount[player]--;
       29:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       30:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        -:  662:  /*int z = 0;// this is the counter for the temp hand*/
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:            return playAdventurer(state, &drawntreasure, currentPlayer, temphand, handPos);
        -:  673:      /*while(drawntreasure<2){
        -:  674:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  675:	  shuffle(currentPlayer, state);
        -:  676:	}
        -:  677:	drawCard(currentPlayer, state);
        -:  678:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  679:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  680:	  drawntreasure++;
        -:  681:	else{
        -:  682:	  temphand[z]=cardDrawn;
        -:  683:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  684:	  z++;
        -:  685:	}
        -:  686:      }
        -:  687:      while(z-1>=0){
        -:  688:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  689:	z=z-1;
        -:  690:      }
        -:  691:      return 0;*/
        -:  692:			
        -:  693:    case council_room:
        -:  694:      //+4 Cards
    #####:  695:      for (i = 0; i < 4; i++)
        -:  696:	{
    #####:  697:	  drawCard(currentPlayer, state);
        -:  698:	}
        -:  699:			
        -:  700:      //+1 Buy
    #####:  701:      state->numBuys++;
        -:  702:			
        -:  703:      //Each other player draws a card
    #####:  704:      for (i = 0; i < state->numPlayers; i++)
        -:  705:	{
    #####:  706:	  if ( i != currentPlayer )
        -:  707:	    {
    #####:  708:	      drawCard(i, state);
        -:  709:	    }
        -:  710:	}
        -:  711:			
        -:  712:      //put played card in played card pile
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
        -:  714:			
    #####:  715:      return 0;
        -:  716:			
        -:  717:    case feast:
        -:  718:      //gain card with cost up to 5
        -:  719:      //Backup hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  722:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  723:      }
        -:  724:      //Backup hand
        -:  725:
        -:  726:      //Update Coins for Buy
    #####:  727:      updateCoins(currentPlayer, state, 5);
    #####:  728:      x = 1;//Condition to loop on
    #####:  729:      while( x == 1) {//Buy one card
    #####:  730:	if (supplyCount(choice1, state) <= 0){
        -:  731:	  if (DEBUG)
        -:  732:	    printf("None of that card left, sorry!\n");
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  736:	  }
        -:  737:	}
    #####:  738:	else if (state->coins < getCost(choice1)){
    #####:  739:	  printf("That card is too expensive!\n");
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  743:	  }
        -:  744:	}
        -:  745:	else{
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  749:	  }
        -:  750:
    #####:  751:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  752:	  x = 0;//No more buying cards
        -:  753:
        -:  754:	  if (DEBUG){
        -:  755:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  756:	  }
        -:  757:
        -:  758:	}
        -:  759:      }     
        -:  760:
        -:  761:      //Reset Hand
    #####:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  763:	state->hand[currentPlayer][i] = temphand[i];
    #####:  764:	temphand[i] = -1;
        -:  765:      }
        -:  766:      //Reset Hand
        -:  767:      			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case gardens:
    #####:  771:      return -1;
        -:  772:			
        -:  773:    case mine:
    #####:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
    #####:  776:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:		
    #####:  781:      if (choice2 > treasure_map || choice2 < curse)
        -:  782:	{
    #####:  783:	  return -1;
        -:  784:	}
        -:  785:
    #####:  786:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  787:	{
    #####:  788:	  return -1;
        -:  789:	}
        -:  790:
    #####:  791:      gainCard(choice2, state, 2, currentPlayer);
        -:  792:
        -:  793:      //discard card from hand
    #####:  794:      discardCard(handPos, currentPlayer, state, 0);
        -:  795:
        -:  796:      //discard trashed card
    #####:  797:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  798:	{
    #####:  799:	  if (state->hand[currentPlayer][i] == j)
        -:  800:	    {
    #####:  801:	      discardCard(i, currentPlayer, state, 0);			
    #####:  802:	      break;
        -:  803:	    }
        -:  804:	}
        -:  805:			
    #####:  806:      return 0;
        -:  807:			
        -:  808:    case remodel:
    #####:  809:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  810:
    #####:  811:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  812:	{
    #####:  813:	  return -1;
        -:  814:	}
        -:  815:
    #####:  816:      gainCard(choice2, state, 0, currentPlayer);
        -:  817:
        -:  818:      //discard card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
        -:  820:
        -:  821:      //discard trashed card
    #####:  822:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  823:	{
    #####:  824:	  if (state->hand[currentPlayer][i] == j)
        -:  825:	    {
    #####:  826:	      discardCard(i, currentPlayer, state, 0);			
    #####:  827:	      break;
        -:  828:	    }
        -:  829:	}
        -:  830:
        -:  831:
    #####:  832:      return 0;
        -:  833:		
        -:  834:    case smithy:
        -:  835:            //+3 Cards
    #####:  836:            return playSmithy(state, currentPlayer, handPos);
        -:  837:     /* for (i = 0; i < 3; i++)
        -:  838:	{
        -:  839:	  drawCard(currentPlayer, state);
        -:  840:	}
        -:  841:			
        -:  842:      //discard card from hand
        -:  843:      discardCard(handPos, currentPlayer, state, 0);
        -:  844:      return 0;*/
        -:  845:		
        -:  846:    case village:
        -:  847:      //+1 Card
    #####:  848:      drawCard(currentPlayer, state);
        -:  849:			
        -:  850:      //+2 Actions
    #####:  851:      state->numActions = state->numActions + 2;
        -:  852:			
        -:  853:      //discard played card from hand
    #####:  854:      discardCard(handPos, currentPlayer, state, 0);
    #####:  855:      return 0;
        -:  856:		
        -:  857:    case baron:
    #####:  858:      state->numBuys++;//Increase buys by 1!
    #####:  859:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  860:	int p = 0;//Iterator for hand!
    #####:  861:	int card_not_discarded = 1;//Flag for discard set!
    #####:  862:	while(card_not_discarded){
    #####:  863:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  864:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  865:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  866:	    state->discardCount[currentPlayer]++;
    #####:  867:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  868:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  869:	    }
    #####:  870:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  871:	    state->handCount[currentPlayer]--;
    #####:  872:	    card_not_discarded = 0;//Exit the loop
        -:  873:	  }
    #####:  874:	  else if (p > state->handCount[currentPlayer]){
        -:  875:	    if(DEBUG) {
        -:  876:	      printf("No estate cards in your hand, invalid choice\n");
        -:  877:	      printf("Must gain an estate if there are any\n");
        -:  878:	    }
    #####:  879:	    if (supplyCount(estate, state) > 0){
    #####:  880:	      gainCard(estate, state, 0, currentPlayer);
    #####:  881:	      state->supplyCount[estate]--;//Decrement estates
    #####:  882:	      if (supplyCount(estate, state) == 0){
    #####:  883:		isGameOver(state);
        -:  884:	      }
        -:  885:	    }
    #####:  886:	    card_not_discarded = 0;//Exit the loop
        -:  887:	  }
        -:  888:			    
        -:  889:	  else{
    #####:  890:	    p++;//Next card
        -:  891:	  }
        -:  892:	}
        -:  893:      }
        -:  894:			    
        -:  895:      else{
    #####:  896:	if (supplyCount(estate, state) > 0){
    #####:  897:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  898:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  899:	  if (supplyCount(estate, state) == 0){
    #####:  900:	    isGameOver(state);
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case great_hall:
        -:  909:      //+1 Card
    #####:  910:      drawCard(currentPlayer, state);
        -:  911:			
        -:  912:      //+1 Actions
    #####:  913:      state->numActions++;
        -:  914:			
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
    #####:  917:      return 0;
        -:  918:		
        -:  919:    case minion:
    #####:  920:            return playMinion(state, currentPlayer, handPos, choice1, choice2);
        -:  921:      /*//+1 action
        -:  922:      state->numActions++;
        -:  923:			
        -:  924:      //discard card from hand
        -:  925:      discardCard(handPos, currentPlayer, state, 0);
        -:  926:			
        -:  927:      if (choice1)		//+2 coins
        -:  928:	{
        -:  929:	  state->coins = state->coins + 2;
        -:  930:	}
        -:  931:			
        -:  932:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  933:	{
        -:  934:	  //discard hand
        -:  935:	  while(numHandCards(state) > 0)
        -:  936:	    {
        -:  937:	      discardCard(handPos, currentPlayer, state, 0);
        -:  938:	    }
        -:  939:				
        -:  940:	  //draw 4
        -:  941:	  for (i = 0; i < 4; i++)
        -:  942:	    {
        -:  943:	      drawCard(currentPlayer, state);
        -:  944:	    }
        -:  945:				
        -:  946:	  //other players discard hand and redraw if hand size > 4
        -:  947:	  for (i = 0; i < state->numPlayers; i++)
        -:  948:	    {
        -:  949:	      if (i != currentPlayer)
        -:  950:		{
        -:  951:		  if ( state->handCount[i] > 4 )
        -:  952:		    {
        -:  953:		      //discard hand
        -:  954:		      while( state->handCount[i] > 0 )
        -:  955:			{
        -:  956:			  discardCard(handPos, i, state, 0);
        -:  957:			}
        -:  958:							
        -:  959:		      //draw 4
        -:  960:		      for (j = 0; j < 4; j++)
        -:  961:			{
        -:  962:			  drawCard(i, state);
        -:  963:			}
        -:  964:		    }
        -:  965:		}
        -:  966:	    }
        -:  967:				
        -:  968:	}
        -:  969:      return 0;*/
        -:  970:		
        -:  971:    case steward:
    #####:  972:            return playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
        -:  973:      /*if (choice1 == 1)
        -:  974:	{
        -:  975:	  //+2 cards
        -:  976:	  drawCard(currentPlayer, state);
        -:  977:	  drawCard(currentPlayer, state);
        -:  978:	}
        -:  979:      else if (choice1 == 2)
        -:  980:	{
        -:  981:	  //+2 coins
        -:  982:	  state->coins = state->coins + 2;
        -:  983:	}
        -:  984:      else
        -:  985:	{
        -:  986:	  //trash 2 cards in hand
        -:  987:	  discardCard(choice2, currentPlayer, state, 1);
        -:  988:	  discardCard(choice3, currentPlayer, state, 1);
        -:  989:	}
        -:  990:			
        -:  991:      //discard card from hand
        -:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:      return 0;*/
        -:  994:		
        -:  995:    case tribute:
    #####:  996:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  997:	if (state->deckCount[nextPlayer] > 0){
    #####:  998:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  999:	  state->deckCount[nextPlayer]--;
        -: 1000:	}
    #####: 1001:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1002:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1003:	  state->discardCount[nextPlayer]--;
        -: 1004:	}
        -: 1005:	else{
        -: 1006:	  //No Card to Reveal
        -: 1007:	  if (DEBUG){
        -: 1008:	    printf("No cards to reveal\n");
        -: 1009:	  }
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
        -: 1013:      else{
    #####: 1014:	if (state->deckCount[nextPlayer] == 0){
    #####: 1015:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1016:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1017:	    state->deckCount[nextPlayer]++;
    #####: 1018:	    state->discard[nextPlayer][i] = -1;
    #####: 1019:	    state->discardCount[nextPlayer]--;
        -: 1020:	  }
        -: 1021:			    
    #####: 1022:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1023:	} 
    #####: 1024:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1025:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1026:	state->deckCount[nextPlayer]--;
    #####: 1027:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1029:	state->deckCount[nextPlayer]--;
        -: 1030:      }    
        -: 1031:		       
    #####: 1032:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1033:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1034:	state->playedCardCount++;
    #####: 1035:	tributeRevealedCards[1] = -1;
        -: 1036:      }
        -: 1037:
    #####: 1038:      for (i = 0; i <= 2; i ++){
    #####: 1039:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1040:	  state->coins += 2;
        -: 1041:	}
        -: 1042:		    
    #####: 1043:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1044:	  drawCard(currentPlayer, state);
    #####: 1045:	  drawCard(currentPlayer, state);
        -: 1046:	}
        -: 1047:	else{//Action Card
    #####: 1048:	  state->numActions = state->numActions + 2;
        -: 1049:	}
        -: 1050:      }
        -: 1051:	    
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case ambassador:
    #####: 1055:      j = 0;		//used to check if player has enough cards to discard
        -: 1056:
    #####: 1057:      if (choice2 > 2 || choice2 < 0)
        -: 1058:	{
    #####: 1059:	  return -1;				
        -: 1060:	}
        -: 1061:
    #####: 1062:      if (choice1 == handPos)
        -: 1063:	{
    #####: 1064:	  return -1;
        -: 1065:	}
        -: 1066:
    #####: 1067:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1068:	{
    #####: 1069:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1070:	    {
    #####: 1071:	      j++;
        -: 1072:	    }
        -: 1073:	}
    #####: 1074:      if (j < choice2)
        -: 1075:	{
    #####: 1076:	  return -1;				
        -: 1077:	}
        -: 1078:
        -: 1079:      if (DEBUG) 
        -: 1080:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1081:
        -: 1082:      //increase supply count for choosen card by amount being discarded
    #####: 1083:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1084:			
        -: 1085:      //each other player gains a copy of revealed card
    #####: 1086:      for (i = 0; i < state->numPlayers; i++)
        -: 1087:	{
    #####: 1088:	  if (i != currentPlayer)
        -: 1089:	    {
    #####: 1090:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1091:	    }
        -: 1092:	}
        -: 1093:
        -: 1094:      //discard played card from hand
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1096:
        -: 1097:      //trash copies of cards returned to supply
    #####: 1098:      for (j = 0; j < choice2; j++)
        -: 1099:	{
    #####: 1100:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	    {
    #####: 1102:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1103:		{
    #####: 1104:		  discardCard(i, currentPlayer, state, 1);
    #####: 1105:		  break;
        -: 1106:		}
        -: 1107:	    }
        -: 1108:	}			
        -: 1109:
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case cutpurse:
        -: 1113:
    #####: 1114:      updateCoins(currentPlayer, state, 2);
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
        -: 1116:	{
    #####: 1117:	  if (i != currentPlayer)
        -: 1118:	    {
    #####: 1119:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1120:		{
    #####: 1121:		  if (state->hand[i][j] == copper)
        -: 1122:		    {
    #####: 1123:		      discardCard(j, i, state, 0);
    #####: 1124:		      break;
        -: 1125:		    }
    #####: 1126:		  if (j == state->handCount[i])
        -: 1127:		    {
    #####: 1128:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1129:			{
        -: 1130:			  if (DEBUG)
        -: 1131:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1132:			}	
    #####: 1133:		      break;
        -: 1134:		    }		
        -: 1135:		}
        -: 1136:					
        -: 1137:	    }
        -: 1138:				
        -: 1139:	}				
        -: 1140:
        -: 1141:      //discard played card from hand
    #####: 1142:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1143:
    #####: 1144:      return 0;
        -: 1145:
        -: 1146:		
        -: 1147:    case embargo: 
        -: 1148:      //+2 Coins
    #####: 1149:      state->coins = state->coins + 2;
        -: 1150:			
        -: 1151:      //see if selected pile is in play
    #####: 1152:      if ( state->supplyCount[choice1] == -1 )
        -: 1153:	{
    #####: 1154:	  return -1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //add embargo token to selected supply pile
    #####: 1158:      state->embargoTokens[choice1]++;
        -: 1159:			
        -: 1160:      //trash card
    #####: 1161:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1162:      return 0;
        -: 1163:		
        -: 1164:    case outpost:
        -: 1165:      //set outpost flag
    #####: 1166:      state->outpostPlayed++;
        -: 1167:			
        -: 1168:      //discard card
    #####: 1169:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1170:      return 0;
        -: 1171:		
        -: 1172:    case salvager:
        -: 1173:      //+1 buy
    #####: 1174:      state->numBuys++;
        -: 1175:			
    #####: 1176:      if (choice1)
        -: 1177:	{
        -: 1178:	  //gain coins equal to trashed card
    #####: 1179:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1180:	  //trash card
    #####: 1181:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1182:	}
        -: 1183:			
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case sea_hag:
    #####: 1189:            return playSeaHag(state, currentPlayer);
        -: 1190:      /*for (i = 0; i < state->numPlayers; i++){
        -: 1191:	if (i != currentPlayer){
        -: 1192:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1193:	  state->discardCount[i]++;
        -: 1194:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1195:	}
        -: 1196:      }
        -: 1197:      return 0;*/
        -: 1198:		
        -: 1199:    case treasure_map:
        -: 1200:      //search hand for another treasure_map
    #####: 1201:      index = -1;
    #####: 1202:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1203:	{
    #####: 1204:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1205:	    {
    #####: 1206:	      index = i;
    #####: 1207:	      break;
        -: 1208:	    }
        -: 1209:	}
    #####: 1210:      if (index > -1)
        -: 1211:	{
        -: 1212:	  //trash both treasure cards
    #####: 1213:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1214:	  discardCard(index, currentPlayer, state, 1);
        -: 1215:
        -: 1216:	  //gain 4 Gold cards
    #####: 1217:	  for (i = 0; i < 4; i++)
        -: 1218:	    {
    #####: 1219:	      gainCard(gold, state, 1, currentPlayer);
        -: 1220:	    }
        -: 1221:				
        -: 1222:	  //return success
    #####: 1223:	  return 1;
        -: 1224:	}
        -: 1225:			
        -: 1226:      //no second treasure_map found in hand
    #####: 1227:      return -1;
        -: 1228:    }
        -: 1229:	
    #####: 1230:  return -1;
        -: 1231:}
        -: 1232:
        6: 1233:int playAdventurer(struct gameState *state, int *drawntreasure,
        -: 1234:                   int currentPlayer, int *temphand, int handPos) {
        6: 1235:    int z = 0;// this is the counter for the temp hand
        -: 1236:    int cardDrawn;
       37: 1237:    while((*drawntreasure)<2){
       26: 1238:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2: 1239:            shuffle(currentPlayer, state);
        -: 1240:        }
       26: 1241:        if (drawCard(currentPlayer, state) < 0) {
        -: 1242:            //The deck and discard pile are empty
        1: 1243:            break;
        -: 1244:        }
       25: 1245:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       25: 1246:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       11: 1247:            (*drawntreasure)++;
        -: 1248:        else{
       14: 1249:            temphand[z]=cardDrawn;
       14: 1250:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       14: 1251:            z++;
        -: 1252:        }
        -: 1253:    }
       26: 1254:    while(z-1>=0){
        -: 1255:        /*BUG INSERTED BELOW*/
       14: 1256:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       14: 1257:        z=z-1;
        -: 1258:    }
        -: 1259:    
        -: 1260:    //!!!! Added this code to discard adventurer after it has been played
        6: 1261:    discardCard(handPos, currentPlayer, state, 0);
        6: 1262:    return 0;
        -: 1263:}
        -: 1264:
    #####: 1265:int playSmithy(struct gameState *state, int currentPlayer, int handPos) {
        -: 1266:    int i;
        -: 1267:    //+3 cards
    #####: 1268:    for (i = 0; i < 3; i++)
        -: 1269:    {
    #####: 1270:        drawCard(currentPlayer, state);
        -: 1271:    }
        -: 1272:    
        -: 1273:    //discard card from hand
        -: 1274:    /*BUG INSERTED BELOW*/
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:int playSeaHag(struct gameState *state, int currentPlayer) {
        -: 1280:    int i;
    #####: 1281:    for (i = 0; i < state->numPlayers; i++){
        -: 1282:        /*BUG INSERTED BELOW*/
    #####: 1283:        if (i == currentPlayer){
    #####: 1284:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1285:            state->discardCount[i]++;
    #####: 1286:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1287:        }
        -: 1288:    }
    #####: 1289:    return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int playSteward(struct gameState *state, int currentPlayer, int handPos, int choice1,
        -: 1293:                int choice2, int choice3) {
    #####: 1294:    if (choice1 == 1)
        -: 1295:    {
        -: 1296:        //+2 cards
    #####: 1297:        drawCard(currentPlayer, state);
    #####: 1298:        drawCard(currentPlayer, state);
        -: 1299:    }
    #####: 1300:    else if (choice1 == 2)
        -: 1301:    {
        -: 1302:        //+2 coins
    #####: 1303:        state->coins = state->coins + 2;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //trash 2 cards in hand
        -: 1308:        /*BUG INSERTED BELOW*/
    #####: 1309:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1310:        discardCard(choice3, currentPlayer, state, 1);
        -: 1311:    }
        -: 1312:    
        -: 1313:    //discard card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int playMinion(struct gameState *state, int currentPlayer, int handPos,
        -: 1319:               int choice1, int choice2) {
        -: 1320:    
        -: 1321:    int i;
        -: 1322:    int j;
        -: 1323:    //+1 action
    #####: 1324:    state->numActions++;
        -: 1325:    
        -: 1326:    //discard card from hand
    #####: 1327:    discardCard(handPos, currentPlayer, state, 0);
        -: 1328:    
    #####: 1329:    if (choice1)		//+2 coins
        -: 1330:    {
    #####: 1331:        state->coins = state->coins + 2;
        -: 1332:    }
        -: 1333:    
    #####: 1334:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1335:    {
        -: 1336:        //discard hand
    #####: 1337:        while(numHandCards(state) > 0)
        -: 1338:        {
    #####: 1339:            discardCard(handPos, currentPlayer, state, 0);
        -: 1340:        }
        -: 1341:        
        -: 1342:        //draw 4
    #####: 1343:        for (i = 0; i < 4; i++)
        -: 1344:        {
    #####: 1345:            drawCard(currentPlayer, state);
        -: 1346:        }
        -: 1347:        
        -: 1348:        //other players discard hand and redraw if hand size > 4
    #####: 1349:        for (i = 0; i < state->numPlayers; i++)
        -: 1350:        {
    #####: 1351:            if (i != currentPlayer)
        -: 1352:            {
    #####: 1353:                if ( state->handCount[i] > 4 )
        -: 1354:                {
        -: 1355:                    //discard hand
    #####: 1356:                    while( state->handCount[i] > 0 )
        -: 1357:                    {
    #####: 1358:                        discardCard(handPos, i, state, 0);
        -: 1359:                    }
        -: 1360:                    
        -: 1361:                    //draw 4
        -: 1362:                    /*BUG INSERTED BELOW*/
    #####: 1363:                    for (j = 0; j < 4; j++)
        -: 1364:                    {
    #####: 1365:                        drawCard(j, state);
        -: 1366:                    }
        -: 1367:                }
        -: 1368:            }
        -: 1369:        }
        -: 1370:        
        -: 1371:    }
    #####: 1372:    return 0;
        -: 1373:}
        -: 1374:
        6: 1375:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1376:{
        -: 1377:	
        -: 1378:  //if card is not trashed, added to Played pile 
        6: 1379:  if (trashFlag < 1)
        -: 1380:    {
        -: 1381:      //add card to played pile
        6: 1382:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1383:      state->playedCardCount++;
        -: 1384:    }
        -: 1385:	
        -: 1386:  //set played card to -1
        6: 1387:  state->hand[currentPlayer][handPos] = -1;
        -: 1388:	
        -: 1389:  //remove card from player's hand
        6: 1390:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1391:    {
        -: 1392:      //reduce number of cards in hand
    #####: 1393:      state->handCount[currentPlayer]--;
        -: 1394:    }
        6: 1395:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1396:    {
        -: 1397:      //reduce number of cards in hand
    #####: 1398:      state->handCount[currentPlayer]--;
        -: 1399:    }
        -: 1400:  else 	
        -: 1401:    {
        -: 1402:      //replace discarded card with last card in hand
        6: 1403:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1404:      //set last card to -1
        6: 1405:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1406:      //reduce number of cards in hand
        6: 1407:      state->handCount[currentPlayer]--;
        -: 1408:    }
        -: 1409:	
        6: 1410:  return 0;
        -: 1411:}
        -: 1412:
    #####: 1413:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1414:{
        -: 1415:  //Note: supplyPos is enum of choosen card
        -: 1416:	
        -: 1417:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1418:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1419:    {
    #####: 1420:      return -1;
        -: 1421:    }
        -: 1422:	
        -: 1423:  //added card for [whoseTurn] current player:
        -: 1424:  // toFlag = 0 : add to discard
        -: 1425:  // toFlag = 1 : add to deck
        -: 1426:  // toFlag = 2 : add to hand
        -: 1427:
    #####: 1428:  if (toFlag == 1)
        -: 1429:    {
    #####: 1430:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1431:      state->deckCount[player]++;
        -: 1432:    }
    #####: 1433:  else if (toFlag == 2)
        -: 1434:    {
    #####: 1435:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1436:      state->handCount[player]++;
        -: 1437:    }
        -: 1438:  else
        -: 1439:    {
    #####: 1440:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1441:      state->discardCount[player]++;
        -: 1442:    }
        -: 1443:	
        -: 1444:  //decrease number in supply pile
    #####: 1445:  state->supplyCount[supplyPos]--;
        -: 1446:	 
    #####: 1447:  return 0;
        -: 1448:}
        -: 1449:
        1: 1450:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1451:{
        -: 1452:  int i;
        -: 1453:	
        -: 1454:  //reset coin count
        1: 1455:  state->coins = 0;
        -: 1456:
        -: 1457:  //add coins for each Treasure card in player's hand
        6: 1458:  for (i = 0; i < state->handCount[player]; i++)
        -: 1459:    {
        5: 1460:      if (state->hand[player][i] == copper)
        -: 1461:	{
        4: 1462:	  state->coins += 1;
        -: 1463:	}
        1: 1464:      else if (state->hand[player][i] == silver)
        -: 1465:	{
    #####: 1466:	  state->coins += 2;
        -: 1467:	}
        1: 1468:      else if (state->hand[player][i] == gold)
        -: 1469:	{
    #####: 1470:	  state->coins += 3;
        -: 1471:	}	
        -: 1472:    }	
        -: 1473:
        -: 1474:  //add bonus
        1: 1475:  state->coins += bonus;
        -: 1476:
        1: 1477:  return 0;
        -: 1478:}
        -: 1479:
        -: 1480:
        -: 1481://end of dominion.c
        -: 1482:
